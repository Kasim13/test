using UnityEngine;

// Scriptable object sınıfını tanımlamak için [CreateAssetMenu] attribute'ünü kullanın
[CreateAssetMenu(fileName = "TowerData", menuName = "ScriptableObjects/TowerData", order = 1)]
public class TowerData : ScriptableObject
{
    // Kule tipi, düşman bulma şekli ve delegate fonksiyonu seçmek için enumları tanımlayın
    public enum TowerType
    {
        Bullet,
        Projectile
    }

    public enum TargetMethod
    {
        SphereCast,
        OverlapSphere,
        Random
    }

    public enum SelectionMode
    {
        RandomSelect,
        NearestSelect
    }

    // Ateş etme yöntemini belirleyen bir enum tipi tanımlayın
    public enum CalculationMethod
    {
        CalculateProjectileVelocity,
        CalculateProjectileAngle
    }

    // Kuleyi oluşturmak için gerekli değişkenleri [SerializeField] attribute ile private olarak tanımlayın
    [SerializeField] private TowerType towerType;
    [SerializeField] private TargetMethod targetMethod;
    [SerializeField] private SelectionMode selectionMode;
    // Ateş etme yöntemini belirleyen bir değişken tanımlayın
    [SerializeField] private CalculationMethod calculationMethod;
    [SerializeField] private Transform scanTransform;
    [SerializeField] private float sphereRadius = 10f;
    [SerializeField] private float maxDistance = 50f;
    [SerializeField] private Transform fireTransform;
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private float shotForce = 10f;
    [SerializeField] private float fireAngle = 45f;
    [SerializeField] private string layer;
    [SerializeField] private Transform[] scanTransforms;

    // Bu değişkenlere erişmek için public property'ler tanımlayın
    public TowerType TypeTower { get => towerType; }
    public TargetMethod MethodTarget { get => targetMethod; }
    public SelectionMode ModeSelection { get => selectionMode; }
    public CalculationMethod MethodCalculation { get => calculationMethod; }
    public Transform ScanTransform { get => scanTransform; }
    public float SphereRadius { get => sphereRadius; }
    public float MaxDistance { get => maxDistance; }
    public Transform FireTransform { get => fireTransform; }
    public GameObject BulletPrefab { get => bulletPrefab; }
    public float ShotForce { get => shotForce; }
    public float FireAngle { get => fireAngle; }
    public string Layer { get => layer; }
    public Transform[] ScanTransforms { get => scanTransforms; }
}


public class TowerScript : MonoBehaviour
{
    // Kuleyi oluşturmak için gerekli değişkenleri [SerializeField] attribute ile private olarak tanımlayın
    [SerializeField] private Transform scanTransform;
    [SerializeField] private Transform[] scanTransforms;
    [SerializeField] private float sphereRadius = 10f;
    [SerializeField] private float maxDistance = 50f;
    [SerializeField] private Transform fireTransform;
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private float shotForce = 10f;
    [SerializeField] private float fireAngle = 45f;

    // Ateş etme oranı
    [SerializeField] private float fireRate = 1f;

    // Son ateş etme zamanı
    private float lastFireTime = 0f;

    // Düşmanların layer mask değeri
    [SerializeField] private string layer;

    // AbstractTower tipinde bir değişken tanımla
    private AbstractTower tower;

    // Bu enumları public olarak tanımla
    public TowerData.TowerType towerType;
    public TowerData.TargetMethod targetMethod;
    public TowerData.SelectionMode selectionMode;
    public TowerData.CalculationMethod calculationMethod;
    ProjectileTargetShooter shooter;

    // Script başladığında çalışacak bir metod tanımlayın
    private void Start()
    {
        // Kule tipi ve düşman bulma şekli seçimini kolaylaştırmak için enum veya scriptable object kullanabilirsin. Örneğin:
        switch (towerType)
        {
            case TowerData.TowerType.Bullet:
                switch (targetMethod)
                {
                    case TowerData.TargetMethod.SphereCast:
                        tower = new BulletTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, shotForce);
                        break;
                    case TowerData.TargetMethod.OverlapSphere:
                        switch (selectionMode)
                        {
                            case TowerData.SelectionMode.RandomSelect:
                                tower = new BulletTower(scanTransform, sphereRadius, layer, fireTransform, bulletPrefab, shotForce, OverlapSphereTarget.randomSelect);
                                break;
                            case TowerData.SelectionMode.NearestSelect:
                                tower = new BulletTower(scanTransform, sphereRadius, layer, fireTransform, bulletPrefab, shotForce, OverlapSphereTarget.nearestSelect);
                                break;
                        }

                        break;
                    case TowerData.TargetMethod.Random:
                        tower = new BulletTower(scanTransforms, fireTransform, bulletPrefab, shotForce);
                        break;
                }
                break;
            case TowerData.TowerType.Projectile:
                switch (calculationMethod)
                {
                    case TowerData.CalculationMethod.CalculateProjectileVelocity:
                        switch (targetMethod)
                        {
                            case TowerData.TargetMethod.SphereCast:
                                // Bir ProjectileTargetShooter nesnesi oluşturma
                                shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                // Nesne üzerinden metodu çağırma
                                tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                break;
                            case TowerData.TargetMethod.OverlapSphere:
                                switch (selectionMode)
                                {
                                    case TowerData.SelectionMode.RandomSelect:
                                        // Bir ProjectileTargetShooter nesnesi oluşturma
                                        shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                        // Nesne üzerinden metodu çağırma
                                        tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                        break;
                                    case TowerData.SelectionMode.NearestSelect:
                                        // Bir ProjectileTargetShooter nesnesi oluşturma
                                        shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                        // Nesne üzerinden metodu çağırma
                                        tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                        break;
                                }
                                break;
                            case TowerData.TargetMethod.Random:
                                // Bir ProjectileTargetShooter nesnesi oluşturma
                                shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                // Nesne üzerinden metodu çağırma
                                tower = new ProjectileTower(scanTransforms, fireTransform, bulletPrefab, fireAngle, shooter.CalculateProjectileVelocity);
                                break;
                        }
                        break;

                    case TowerData.CalculationMethod.CalculateProjectileAngle:
                        switch (targetMethod)
                        {
                            case TowerData.TargetMethod.SphereCast:
                                // Bir ProjectileTargetShooter nesnesi oluşturma
                                shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                // Nesne üzerinden metodu çağırma
                                tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                break;
                            case TowerData.TargetMethod.OverlapSphere:
                                switch (selectionMode)
                                {
                                    case TowerData.SelectionMode.RandomSelect:
                                        // Bir ProjectileTargetShooter nesnesi oluşturma
                                        shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                        // Nesne üzerinden metodu çağırma
                                        tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                        break;
                                    case TowerData.SelectionMode.NearestSelect:
                                        // Bir ProjectileTargetShooter nesnesi oluşturma
                                        shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                        // Nesne üzerinden metodu çağırma
                                        tower = new ProjectileTower(scanTransform, scanTransform.forward, sphereRadius, maxDistance, layer, fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                        break;
                                }
                                break;
                            case TowerData.TargetMethod.Random:
                                // Bir ProjectileTargetShooter nesnesi oluşturma
                                shooter = new ProjectileTargetShooter(fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                // Nesne üzerinden metodu çağırma
                                tower = new ProjectileTower(scanTransforms, fireTransform, bulletPrefab, shotForce, shooter.CalculateProjectileAngle);
                                break;
                        }
                        break;
                }
                break;
        }
    }

    // Her karede çalışacak bir metod tanımlayın
    private void Update()
    {
        // Ateş etme koşulunu bir bool değişkene atayabilirsin. Böylece kodun okunabilirliğini artırabilirsin. Örneğin:

        bool canFire = Time.time - lastFireTime > 1f / fireRate;
        if (canFire)
        {
            // Kuleye düşman hedeflemesini söyle
            tower.EnemyTarget();

            // Kuleye ateş etmesini söyle
            tower.Fire();

            // Son ateş etme zamanını güncelle
            lastFireTime = Time.time;
        }

    }
}


// CustomEditor attribute'ünü kullanarak, bu sınıfın BulletTowerScript sınıfının custom editor'ü olduğunu belirtin
[CustomEditor(typeof(TowerScript))]
public class TowerEditor : Editor
{
    // Custom editor'de kullanacağımız değişkenleri tanımlayın
    private SerializedProperty towerData;
    private SerializedProperty fireRate;
    private SerializedProperty layer;

    // Custom editor başladığında çalışacak bir metod tanımlayın
    private void OnEnable()
    {
        // Değişkenleri BulletTowerScript sınıfından alın
        towerData = serializedObject.FindProperty("towerData");
        fireRate = serializedObject.FindProperty("fireRate");
        layer = serializedObject.FindProperty("layer");
    }

    // Custom editor'de Inspector panelinde ne gösterileceğini belirleyen bir metod tanımlayın
    public override void OnInspectorGUI()
    {
        // Değişiklikleri kaydetmek için serializedObject.Update() metodunu çağırın
        serializedObject.Update();

        // Tower Data değişkenini Inspector panelinde gösterin
        EditorGUILayout.PropertyField(towerData);

        // Tower Data değişkeni null değilse, enum değerlerine göre farklı değişkenleri gösterin veya gizleyin
        if (towerData.objectReferenceValue != null)
        {
            // Tower Data değişkeninden TowerType, TargetMethod ve SelectionMode enumlarını alın
            TowerData data = towerData.objectReferenceValue as TowerData;
            TowerData.TowerType towerType = data.TypeTower;
            TowerData.TargetMethod targetMethod = data.MethodTarget;
            TowerData.SelectionMode selectionMode = data.ModeSelection;

            // Eğer TargetMethod SphereCast ise, sphereRadius ve maxDistance değişkenlerini gösterin
            if (targetMethod == TowerData.TargetMethod.SphereCast)
            {
                EditorGUILayout.PropertyField(serializedObject.FindProperty("sphereRadius"));
                EditorGUILayout.PropertyField(serializedObject.FindProperty("maxDistance"));
            }

            // Eğer TargetMethod OverlapSphere ise, sphereRadius değişkenini gösterin
            if (targetMethod == TowerData.TargetMethod.OverlapSphere)
            {
                EditorGUILayout.PropertyField(serializedObject.FindProperty("sphereRadius"));
            }

            // Eğer TargetMethod Random ise, hiçbir değişken gösterme
            if (targetMethod == TowerData.TargetMethod.Random)
            {
                // Hiçbir şey yapma
            }

            // Eğer TowerType Projectile ise, fireAngle değişkenini gösterin
            if (towerType == TowerData.TowerType.Projectile)
            {
                EditorGUILayout.PropertyField(serializedObject.FindProperty("fireAngle"));
            }

            // Eğer SelectionMode RandomSelect veya NearestSelect ise, hiçbir değişken gösterme
            if (selectionMode == TowerData.SelectionMode.RandomSelect || selectionMode == TowerData.SelectionMode.NearestSelect)
            {
                // Hiçbir şey yapma
            }

        }

        // Fire Rate ve Layer değişkenlerini her zaman gösterin
        EditorGUILayout.PropertyField(fireRate);
        EditorGUILayout.PropertyField(layer);

        // Değişiklikleri uygulamak için serializedObject.ApplyModifiedProperties() metodunu çağırın
        serializedObject.ApplyModifiedProperties();
    }
}

